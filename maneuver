<?php
// Enhanced Trade Simulator Form with Professional Design
function custom_trade_simulator_form() {
    if (!is_user_logged_in()) return '<p>You must be logged in to trade.</p>';

    $user_id = get_current_user_id();
    $balance = (float) get_field('balance', 'user_' . $user_id);
    ob_start();
    ?>

    <!-- Toast Notification Container -->
    <div id="toastContainer" style="position: fixed; top: 20px; right: 20px; z-index: 10000; max-width: 350px;"></div>

    <style>
    /* Professional Trading Interface Styles */
    .trading-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #0f0f23 0%, #1a1a3e 100%);
        color: #ffffff;
        border-radius: 15px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.3);
    }

    .trading-header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        border-radius: 10px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }

    .balance-display {
        display: inline-block;
        padding: 15px 30px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 25px;
        font-size: 1.2em;
        font-weight: bold;
        box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        transition: all 0.3s ease;
    }

    .balance-display:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 30px rgba(0,0,0,0.4);
    }

    .trading-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
        margin-bottom: 30px;
    }

    .chart-section {
        background: #1a1a3e;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        border: 1px solid #2a2a5e;
    }

    .chart-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #2a2a5e;
    }

    .chart-title {
        font-size: 1.3em;
        font-weight: 600;
        color: #64b5f6;
        margin: 0;
    }

    .trading-form {
        background: #1a1a3e;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        border: 1px solid #2a2a5e;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #e0e0e0;
        font-size: 0.95em;
    }

    .form-input, .form-select {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #2a2a5e;
        border-radius: 8px;
        background: #0f0f23;
        color: #ffffff;
        font-size: 1em;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

    .form-input:focus, .form-select:focus {
        outline: none;
        border-color: #64b5f6;
        box-shadow: 0 0 0 3px rgba(100, 181, 246, 0.1);
    }

    .trade-button {
        width: 100%;
        padding: 15px;
        background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
        color: white;
        border: none;
        border-radius: 10px;
        font-size: 1.1em;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 8px 20px rgba(76, 175, 80, 0.3);
        position: relative;
        overflow: hidden;
    }

    .trade-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 30px rgba(76, 175, 80, 0.4);
    }

    .trade-button:active {
        transform: translateY(0);
    }

    .trade-button:disabled {
        background: #555;
        cursor: not-allowed;
        transform: none;
    }

    .active-trades {
        margin-top: 30px;
    }

    .trade-card {
        background: linear-gradient(135deg, #1a1a3e 0%, #2a2a5e 100%);
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 15px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        border-left: 4px solid #64b5f6;
        position: relative;
        overflow: hidden;
    }

    .trade-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #64b5f6, #42a5f5);
    }

    .trade-info {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 15px;
    }

    .trade-stat {
        text-align: center;
        padding: 10px;
        background: rgba(255,255,255,0.05);
        border-radius: 8px;
    }

    .stat-label {
        font-size: 0.85em;
        color: #b0b0b0;
        margin-bottom: 5px;
    }

    .stat-value {
        font-size: 1.1em;
        font-weight: 600;
        color: #ffffff;
    }

    .countdown-timer {
        text-align: center;
        font-size: 1.3em;
        font-weight: bold;
        color: #4caf50;
        margin: 15px 0;
    }

    .progress-container {
        width: 100%;
        height: 8px;
        background: #2a2a5e;
        border-radius: 4px;
        overflow: hidden;
        margin: 15px 0;
    }

    .progress-bar {
        height: 100%;
        background: linear-gradient(90deg, #4caf50, #64b5f6);
        border-radius: 4px;
        transition: width 1s ease;
    }

    .toast {
        padding: 16px 20px;
        margin-bottom: 10px;
        border-radius: 8px;
        color: white;
        font-weight: bold;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        transform: translateX(100%);
        opacity: 0;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .toast.show {
        transform: translateX(0);
        opacity: 1;
    }

    .toast-success {
        background: linear-gradient(135deg, #4caf50, #45a049);
        border-left: 4px solid #2e7d32;
    }

    .toast-error {
        background: linear-gradient(135deg, #f44336, #d32f2f);
        border-left: 4px solid #c62828;
    }

    .toast-warning {
        background: linear-gradient(135deg, #ff9800, #f57c00);
        border-left: 4px solid #ef6c00;
    }

    .toast-info {
        background: linear-gradient(135deg, #2196f3, #1976d2);
        border-left: 4px solid #1565c0;
    }

    .toast::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 0;
        background: rgba(255,255,255,0.1);
        animation: progress 5s linear forwards;
    }

    @keyframes progress {
        to { width: 100%; }
    }

    .toast-close {
        position: absolute;
        top: 8px;
        right: 12px;
        background: none;
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        opacity: 0.7;
    }

    .toast-close:hover {
        opacity: 1;
    }

    .toast-icon {
        display: inline-block;
        margin-right: 8px;
        font-size: 16px;
    }

    .pulse {
        animation: pulse 1s infinite;
    }

    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }

    /* Mobile Responsive Design */
    @media (max-width: 768px) {
        .trading-container {
            padding: 15px;
            margin: 10px;
        }

        .trading-grid {
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .chart-section, .trading-form {
            padding: 20px;
        }

        .trade-info {
            grid-template-columns: 1fr;
        }

        .balance-display {
            padding: 12px 20px;
            font-size: 1.1em;
        }

        .trading-header {
            padding: 15px;
        }

        .form-input, .form-select {
            padding: 10px 14px;
        }

        .trade-button {
            padding: 12px;
        }
    }

    @media (max-width: 480px) {
        .trading-container {
            padding: 10px;
            margin: 5px;
        }

        .chart-section, .trading-form {
            padding: 15px;
        }

        .balance-display {
            padding: 10px 15px;
            font-size: 1em;
        }

        .toast {
            margin-bottom: 8px;
            padding: 12px 16px;
        }

        #toastContainer {
            max-width: 300px;
            top: 10px;
            right: 10px;
        }
    }
    </style>

    <div class="trading-container">
        <div class="trading-header">
            <h2 style="margin: 0 0 15px 0; font-size: 1.8em; color: #ffffff;">🚀 Professional Trading Simulator</h2>
            <div class="balance-display">
                <strong>Balance:</strong> $<span id="userBalance"><?php echo number_format($balance, 2); ?></span>
            </div>
        </div>

        <div class="trading-grid">
            <div class="chart-section">
                <div class="chart-header">
                    <h3 class="chart-title">📈 Live Market Chart</h3>
                </div>
                <div class="asset-chart" id="assetChart" style="height:400px;"></div>
            </div>

            <div class="trading-form">
                <h3 style="margin-top: 0; color: #64b5f6; font-size: 1.3em;">Execute Trade</h3>
                <form id="tradeForm">
                    <div class="form-group">
                        <label class="form-label">Select Asset:</label>
                        <select name="asset" class="form-select">
                            <option value="BTC/USD">Bitcoin (BTC/USD)</option>
                            <option value="ETH/USD">Ethereum (ETH/USD)</option>
                            <option value="AAPL">Apple Inc. (AAPL)</option>
                            <option value="EUR/USD">Euro/USD (EUR/USD)</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Trade Direction:</label>
                        <select name="direction" class="form-select">
                            <option value="buy">📈 Buy (Call)</option>
                            <option value="sell">📉 Sell (Put)</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Investment Amount (USD):</label>
                        <input type="number" name="amount" class="form-input" step="0.01" min="1" required placeholder="Enter amount...">
                    </div>

                    <div class="form-group">
                        <label class="form-label">Trade Duration:</label>
                        <select name="duration" class="form-select">
                            <option value="1">1 Minute</option>
                            <option value="5">5 Minutes</option>
                            <option value="10">10 Minutes</option>
                            <option value="30">30 Minutes</option>
                            <option value="60">1 Hour</option>
                            <option value="4320">3 Days</option>
                        </select>
                    </div>

                    <button type="submit" class="trade-button">
                        <span>🎯 Execute Trade</span>
                    </button>
                </form>
            </div>
        </div>

        <div class="active-trades">
            <h3 style="color: #64b5f6; margin-bottom: 20px;">⚡ Active Trades</h3>
            <div id="activeTrades"></div>
        </div>
    </div>

    <script src="https://s3.tradingview.com/tv.js"></script>
    <script>
    // Toast Notification System
    class ToastNotification {
        constructor() {
            this.container = document.getElementById('toastContainer');
        }

        show(message, type = 'info', duration = 5000) {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            
            const icons = {
                success: '✅',
                error: '❌',
                warning: '⚠️',
                info: 'ℹ️'
            };

            toast.innerHTML = `
                <span class="toast-icon">${icons[type]}</span>
                <span>${message}</span>
                <button class="toast-close" onclick="this.parentElement.remove()">×</button>
            `;

            this.container.appendChild(toast);

            setTimeout(() => toast.classList.add('show'), 100);

            setTimeout(() => {
                if (toast.parentElement) {
                    toast.style.transform = 'translateX(100%)';
                    toast.style.opacity = '0';
                    setTimeout(() => toast.remove(), 300);
                }
            }, duration);

            return toast;
        }

        success(message, duration = 5000) {
            return this.show(message, 'success', duration);
        }

        error(message, duration = 6000) {
            return this.show(message, 'error', duration);
        }

        warning(message, duration = 5000) {
            return this.show(message, 'warning', duration);
        }

        info(message, duration = 4000) {
            return this.show(message, 'info', duration);
        }
    }

    const toast = new ToastNotification();

    function renderChart(symbol = 'BINANCE:BTCUSDT') {
        new TradingView.widget({
            "container_id": "assetChart",
            "autosize": true,
            "symbol": symbol,
            "interval": "1",
            "timezone": "Etc/UTC",
            "theme": "dark",
            "style": "1",
            "locale": "en",
            "toolbar_bg": "#1a1a3e",
            "enable_publishing": false,
            "hide_top_toolbar": false,
            "hide_legend": false,
            "save_image": false,
            "studies": [
                "MASimple@tv-basicstudies",
                "RSI@tv-basicstudies"
            ]
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        renderChart("BINANCE:BTCUSDT");

        const assetDropdown = document.querySelector('select[name="asset"]');
        if (assetDropdown) {
            assetDropdown.addEventListener("change", function () {
                const asset = this.value;
                let symbol;

                switch (asset) {
                    case "BTC/USD": symbol = "BINANCE:BTCUSDT"; break;
                    case "ETH/USD": symbol = "BINANCE:ETHUSDT"; break;
                    case "AAPL": symbol = "NASDAQ:AAPL"; break;
                    case "EUR/USD": symbol = "FX:EURUSD"; break;
                    default: symbol = "BINANCE:BTCUSDT";
                }

                document.getElementById("assetChart").innerHTML = "";
                renderChart(symbol);
                toast.info(`Chart updated to ${asset}`);
            });
        }

        const tradeForm = document.getElementById("tradeForm");
        const activeTrades = document.getElementById("activeTrades");
        const userBalance = document.getElementById("userBalance");

        tradeForm.addEventListener("submit", function(e) {
            e.preventDefault();

            const formData = new FormData(tradeForm);
            const asset = formData.get("asset");
            const direction = formData.get("direction");
            const amount = parseFloat(formData.get("amount"));
            const duration = parseInt(formData.get("duration"));

            if (amount <= 0) {
                toast.error("Trade amount must be greater than zero!");
                return;
            }

            const currentBalance = parseFloat(userBalance.textContent.replace(/,/g, ''));
            if (amount > currentBalance) {
                toast.error(`Insufficient balance! You have $${currentBalance.toFixed(2)} but need $${amount.toFixed(2)}`);
                return;
            }

            toast.success(`Trade initiated: ${direction.toUpperCase()} ${asset} for $${amount.toFixed(2)}`);

            const tradeId = "trade_" + Date.now();
            const tradeCard = document.createElement("div");
            tradeCard.id = tradeId;
            tradeCard.className = "trade-card";

            let timeLeft = duration * 60;
            const countdown = document.createElement("div");
            countdown.className = "countdown-timer";

            const progressContainer = document.createElement("div");
            progressContainer.className = "progress-container";
            const progressBar = document.createElement("div");
            progressBar.className = "progress-bar";
            progressContainer.appendChild(progressBar);

            tradeCard.innerHTML = `
                <div class="trade-info">
                    <div class="trade-stat">
                        <div class="stat-label">Asset</div>
                        <div class="stat-value">${asset}</div>
                    </div>
                    <div class="trade-stat">
                        <div class="stat-label">Direction</div>
                        <div class="stat-value">${direction.toUpperCase()}</div>
                    </div>
                    <div class="trade-stat">
                        <div class="stat-label">Amount</div>
                        <div class="stat-value">$${amount.toFixed(2)}</div>
                    </div>
                    <div class="trade-stat">
                        <div class="stat-label">Status</div>
                        <div class="stat-value" style="color: #4caf50;">Active</div>
                    </div>
                </div>
            `;

            tradeCard.appendChild(countdown);
            tradeCard.appendChild(progressContainer);
            activeTrades.appendChild(tradeCard);

            const newBalance = currentBalance - amount;
            userBalance.textContent = newBalance.toLocaleString('en-US', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });

            userBalance.parentElement.classList.add('pulse');
            setTimeout(() => userBalance.parentElement.classList.remove('pulse'), 1000);

            fetch('<?php echo admin_url('admin-ajax.php'); ?>', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({
                    action: 'update_balance',
                    amount: -amount
                })
            });

            const timer = setInterval(() => {
                timeLeft--;
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                
                countdown.textContent = `⏱️ ${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                const progress = (timeLeft / (duration * 60)) * 100;
                progressBar.style.width = progress + '%';
                
                if (timeLeft === 30) {
                    toast.warning(`${asset} trade expires in 30 seconds!`);
                }
                
                if (timeLeft === 10) {
                    toast.warning(`${asset} trade expires in 10 seconds!`);
                }

                if (timeLeft <= 0) {
                    clearInterval(timer);
                    
                    const isWin = Math.random() > 0.5;
                    let profit = 0;
                    
                    if (isWin) {
                        profit = amount * 0.8;
                        toast.success(`🎉 ${asset} Trade WON! Profit: +$${profit.toFixed(2)}`);
                    } else {
                        profit = -amount;
                        toast.error(`💔 ${asset} Trade LOST! Loss: -$${Math.abs(profit).toFixed(2)}`);
                    }

                    tradeCard.style.borderLeftColor = isWin ? '#4caf50' : '#f44336';
                    tradeCard.style.background = isWin ? 
                        'linear-gradient(135deg, #1a4a1a 0%, #2a5a2a 100%)' : 
                        'linear-gradient(135deg, #4a1a1a 0%, #5a2a2a 100%)';
                    
                    const statusElement = tradeCard.querySelector('.trade-stat:last-child .stat-value');
                    statusElement.textContent = isWin ? 'WON' : 'LOST';
                    statusElement.style.color = isWin ? '#4caf50' : '#f44336';
                    
                    const resultInfo = document.createElement('div');
                    resultInfo.style.cssText = `
                        margin-top: 15px;
                        padding: 15px;
                        background: rgba(0,0,0,0.3);
                        border-radius: 8px;
                        border-left: 4px solid ${isWin ? '#4caf50' : '#f44336'};
                        text-align: center;
                    `;
                    resultInfo.innerHTML = `
                        <div style="font-size: 1.2em; font-weight: bold; color: ${isWin ? '#4caf50' : '#f44336'}; margin-bottom: 8px;">
                            ${isWin ? '🎉 WINNING TRADE!' : '💔 LOSING TRADE'}
                        </div>
                        <div style="color: #e0e0e0;">
                            <strong>Final P/L:</strong> ${profit >= 0 ? '+' : ''}$${profit.toFixed(2)}
                        </div>
                    `;
                    tradeCard.appendChild(resultInfo);

                    const finalBalance = parseFloat(userBalance.textContent.replace(/,/g, '')) + amount + profit;
                    userBalance.textContent = finalBalance.toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });

                    userBalance.parentElement.classList.add('pulse');
                    setTimeout(() => userBalance.parentElement.classList.remove('pulse'), 1000);

                    countdown.remove();
                    progressContainer.remove();

                    fetch('<?php echo admin_url('admin-ajax.php'); ?>', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: new URLSearchParams({
                            action: 'save_trade_result',
                            asset: asset,
                            direction: direction,
                            amount: amount,
                            result: isWin ? 'win' : 'lose',
                            profit: profit
                        })
                    });

                    setTimeout(() => {
                        tradeCard.style.opacity = '0';
                        tradeCard.style.transform = 'translateY(-20px)';
                        tradeCard.style.transition = 'all 0.5s ease';
                        setTimeout(() => tradeCard.remove(), 500);
                    }, 15000);
                }
            }, 1000);

            tradeForm.reset();
        });

        // Auto-refresh balance every 30 seconds
        setInterval(() => {
            fetch('<?php echo admin_url('admin-ajax.php'); ?>', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({
                    action: 'get_user_balance'
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    userBalance.textContent = parseFloat(data.data).toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                }
            })
            .catch(err => console.error('Balance refresh error:', err));
        }, 30000);
    });
    </script>

    <?php
    return ob_get_clean();
}
add_shortcode('trade_simulator', 'custom_trade_simulator_form');

// AJAX handler for updating balance
add_action('wp_ajax_update_balance', function() {
    if (!is_user_logged_in()) {
        wp_send_json_error('Not logged in');
    }

    $user_id = get_current_user_id();
    $amount = floatval($_POST['amount']);
    $current_balance = (float) get_field('balance', 'user_' . $user_id);
    $new_balance = $current_balance + $amount;
    
    update_field('balance', $new_balance, 'user_' . $user_id);
    wp_send_json_success($new_balance);
});

// AJAX handler for getting user balance
add_action('wp_ajax_get_user_balance', function() {
    if (!is_user_logged_in()) {
        wp_send_json_error('Not logged in');
    }

    $user_id = get_current_user_id();
    $balance = (float) get_field('balance', 'user_' . $user_id);
    wp_send_json_success($balance);
});

// AJAX handler for saving trade results
add_action('wp_ajax_save_trade_result', function() {
    if (!is_user_logged_in()) {
        wp_send_json_error('Not logged in');
    }

    $user_id = get_current_user_id();
    $asset = sanitize_text_field($_POST['asset']);
    $direction = sanitize_text_field($_POST['direction']);
    $amount = floatval($_POST['amount']);
    $result = sanitize_text_field($_POST['result']);
    $profit = floatval($_POST['profit']);

    $history = get_user_meta($user_id, 'trade_history', true);
    if (!is_array($history)) {
        $history = [];
    }

    $trade = [
        'asset' => $asset,
        'direction' => $direction,
        'amount' => $amount,
        'result' => $result,
        'profit' => $profit,
        'timestamp' => time()
    ];

    $history[] = $trade;
    update_user_meta($user_id, 'trade_history', $history);

    $current_balance = (float) get_field('balance', 'user_' . $user_id);
    $new_balance = $current_balance + $profit;
    update_field('balance', $new_balance, 'user_' . $user_id);

    wp_send_json_success([
        'trade' => $trade,
        'new_balance' => $new_balance
    ]);
});

// Enhanced Trade History Table Shortcode with Pagination and Filtering
function custom_trade_history_display() {
    if (!is_user_logged_in()) return '<p>You must be logged in to view trade history.</p>';

    $user_id = get_current_user_id();
    $history = get_user_meta($user_id, 'trade_history', true);

    ob_start();
    ?>
    <div id='tradeHistory' style="max-width: 1200px; margin: 0 auto; padding: 20px; background: linear-gradient(135deg, #0f0f23 0%, #1a1a3e 100%); border-radius: 15px; color: #fff;">
        <h3 style="color: #64b5f6; margin-bottom: 25px; font-size: 1.5em;">📊 Trade History</h3>
        
        <!-- Filters -->
        <div style="background:#1a1a3e; padding:20px; margin-bottom:25px; border-radius:12px; border: 1px solid #2a2a5e;"> 
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-bottom: 20px;">
                <div>
                    <label style="display: block; margin-bottom: 5px; color: #e0e0e0;">Filter by Asset:</label>
                    <select id="assetFilter" style="width: 100%; padding: 10px; background: #0f0f23; color: #fff; border: 1px solid #2a2a5e; border-radius: 6px;">
                        <option value="">All Assets</option>
                        <option value="BTC/USD">Bitcoin (BTC/USD)</option>
                        <option value="ETH/USD">Ethereum (ETH/USD)</option>
                        <option value="AAPL">Apple Inc. (AAPL)</option>
                        <option value="EUR/USD">Euro/USD (EUR/USD)</option>
                    </select>
                </div>
                <div>
                    <label style="display: block; margin-bottom: 5px; color: #e0e0e0;">Filter by Result:</label>
                    <select id="resultFilter" style="width: 100%; padding: 10px; background: #0f0f23; color: #fff; border: 1px solid #2a2a5e; border-radius: 6px;">
                        <option value="">All Results</option>
                        <option value="win">Winning Trades</option>
                        <option value="lose">Losing Trades</option>
                    </select>
                </div>
                <div>
                    <label style="display: block; margin-bottom: 5px; color: #e0e0e0;">Sort by:</label>
                    <select id="sortBy" style="width: 100%; padding: 10px; background: #0f0f23; color: #fff; border: 1px solid #2a2a5e; border-radius: 6px;">
                        <option value="newest">Newest First</option>
                        <option value="oldest">Oldest First</option>
                        <option value="highest_profit">Highest Profit</option>
                        <option value="lowest_profit">Lowest Profit</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Statistics Overview -->
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
            <div style="background: linear-gradient(135deg, #4caf50 0%, #45a049 100%); padding: 20px; border-radius: 12px; text-align: center;">
                <h4 style="margin: 0 0 10px 0; color: #fff;">Total Trades</h4>
                <p style="font-size: 1.5em; font-weight: bold; margin: 0;" id="totalTrades">0</p>
            </div>
            <div style="background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%); padding: 20px; border-radius: 12px; text-align: center;">
                <h4 style="margin: 0 0 10px 0; color: #fff;">Win Rate</h4>
                <p style="font-size: 1.5em; font-weight: bold; margin: 0;" id="winRate">0%</p>
            </div>
            <div style="background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%); padding: 20px; border-radius: 12px; text-align: center;">
                <h4 style="margin: 0 0 10px 0; color: #fff;">Total P/L</h4>
                <p style="font-size: 1.5em; font-weight: bold; margin: 0;" id="totalPL">$0.00</p>
            </div>
            <div style="background: linear-gradient(135deg, #9c27b0 0%, #7b1fa2 100%); padding: 20px; border-radius: 12px; text-align: center;">
                <h4 style="margin: 0 0 10px 0; color: #fff;">Best Trade</h4>
                <p style="font-size: 1.5em; font-weight: bold; margin: 0;" id="bestTrade">$0.00</p>
            </div>
        </div>

        <!-- Trade History Table -->
        <div style="background: #1a1a3e; border-radius: 12px; overflow: hidden; border: 1px solid #2a2a5e;">
            <div style="overflow-x: auto;">
                <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr style="background: #2a2a5e;">
                            <th style="padding: 15px; text-align: left; color: #64b5f6; font-weight: 600;">Date</th>
                            <th style="padding: 15px; text-align: left; color: #64b5f6; font-weight: 600;">Asset</th>
                            <th style="padding: 15px; text-align: left; color: #64b5f6; font-weight: 600;">Direction</th>
                            <th style="padding: 15px; text-align: left; color: #64b5f6; font-weight: 600;">Amount</th>
                            <th style="padding: 15px; text-align: left; color: #64b5f6; font-weight: 600;">Result</th>
                            <th style="padding: 15px; text-align: left; color: #64b5f6; font-weight: 600;">P/L</th>
                        </tr>
                    </thead>
                    <tbody id="historyTableBody">
                        <!-- Dynamic content will be inserted here -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination -->
        <div style="text-align: center; margin-top: 25px;">
            <button id="prevPage" style="background: #2a2a5e; color: #fff; border: none; padding: 10px 20px; margin: 0 5px; border-radius: 6px; cursor: pointer;">Previous</button>
            <span id="pageInfo" style="margin: 0 15px; color: #e0e0e0;">Page 1 of 1</span>
            <button id="nextPage" style="background: #2a2a5e; color: #fff; border: none; padding: 10px 20px; margin: 0 5px; border-radius: 6px; cursor: pointer;">Next</button>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const history = <?php echo json_encode($history ?: []); ?>;
        let filteredHistory = [...history];
        let currentPage = 1;
        const itemsPerPage = 10;

        function calculateStats() {
            const totalTrades = filteredHistory.length;
            const winningTrades = filteredHistory.filter(trade => trade.result === 'win').length;
            const winRate = totalTrades > 0 ? ((winningTrades / totalTrades) * 100).toFixed(1) : 0;
            const totalPL = filteredHistory.reduce((sum, trade) => sum + parseFloat(trade.profit), 0);
            const bestTrade = filteredHistory.length > 0 ? Math.max(...filteredHistory.map(trade => parseFloat(trade.profit))) : 0;

            document.getElementById('totalTrades').textContent = totalTrades;
            document.getElementById('winRate').textContent = winRate + '%';
            document.getElementById('totalPL').textContent = '$' + totalPL.toFixed(2);
            document.getElementById('totalPL').style.color = totalPL >= 0 ? '#4caf50' : '#f44336';
            document.getElementById('bestTrade').textContent = '$' + bestTrade.toFixed(2);
        }

        function renderTable() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = filteredHistory.slice(startIndex, endIndex);

            const tbody = document.getElementById('historyTableBody');
            tbody.innerHTML = '';

            if (pageData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; padding: 30px; color: #888;">No trades found</td></tr>';
                return;
            }

            pageData.forEach(trade => {
                const row = document.createElement('tr');
                row.style.cssText = 'border-bottom: 1px solid #2a2a5e; transition: background-color 0.3s ease;';
                row.addEventListener('mouseenter', () => row.style.backgroundColor = '#2a2a5e');
                row.addEventListener('mouseleave', () => row.style.backgroundColor = 'transparent');

                const date = new Date(trade.timestamp * 1000).toLocaleDateString() + ' ' + new Date(trade.timestamp * 1000).toLocaleTimeString();
                const resultColor = trade.result === 'win' ? '#4caf50' : '#f44336';
                const resultIcon = trade.result === 'win' ? '✅' : '❌';
                const directionIcon = trade.direction === 'buy' ? '📈' : '📉';
                const profitColor = trade.profit >= 0 ? '#4caf50' : '#f44336';

                row.innerHTML = `
                    <td style="padding: 15px; color: #e0e0e0;">${date}</td>
                    <td style="padding: 15px; color: #e0e0e0; font-weight: 600;">${trade.asset}</td>
                    <td style="padding: 15px; color: #e0e0e0;">${directionIcon} ${trade.direction.toUpperCase()}</td>
                    <td style="padding: 15px; color: #e0e0e0; font-weight: 600;">$${parseFloat(trade.amount).toFixed(2)}</td>
                    <td style="padding: 15px; color: ${resultColor}; font-weight: 600;">${resultIcon} ${trade.result.toUpperCase()}</td>
                    <td style="padding: 15px; color: ${profitColor}; font-weight: 600;">${trade.profit >= 0 ? '+' : ''}$${parseFloat(trade.profit).toFixed(2)}</td>
                `;
                tbody.appendChild(row);
            });

            updatePagination();
        }

        function updatePagination() {
            const totalPages = Math.ceil(filteredHistory.length / itemsPerPage);
            document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages}`;
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages;
        }

        function filterAndSort() {
            const assetFilter = document.getElementById('assetFilter').value;
            const resultFilter = document.getElementById('resultFilter').value;
            const sortBy = document.getElementById('sortBy').value;

            filteredHistory = history.filter(trade => {
                const assetMatch = !assetFilter || trade.asset === assetFilter;
                const resultMatch = !resultFilter || trade.result === resultFilter;
                return assetMatch && resultMatch;
            });

            switch (sortBy) {
                case 'oldest':
                    filteredHistory.sort((a, b) => a.timestamp - b.timestamp);
                    break;
                case 'highest_profit':
                    filteredHistory.sort((a, b) => b.profit - a.profit);
                    break;
                case 'lowest_profit':
                    filteredHistory.sort((a, b) => a.profit - b.profit);
                    break;
                default: // newest
                    filteredHistory.sort((a, b) => b.timestamp - a.timestamp);
            }

            currentPage = 1;
            calculateStats();
            renderTable();
        }

        // Event listeners
        document.getElementById('assetFilter').addEventListener('change', filterAndSort);
        document.getElementById('resultFilter').addEventListener('change', filterAndSort);
        document.getElementById('sortBy').addEventListener('change', filterAndSort);

        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
            }
        });

        document.getElementById('nextPage').addEventListener('click', () => {
            const totalPages = Math.ceil(filteredHistory.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                renderTable();
            }
        });

        // Initial render
        filterAndSort();
    });
    </script>

    <style>
    /* Mobile responsive styles for trade history */
    @media (max-width: 768px) {
        #tradeHistory {
            padding: 15px;
            margin: 10px;
        }
        
        #tradeHistory table {
            font-size: 0.9em;
        }
        
        #tradeHistory th, #tradeHistory td {
            padding: 10px 8px;
        }
        
        #tradeHistory .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }
        
        #tradeHistory .filter-grid {
            grid-template-columns: 1fr;
        }
    }

    @media (max-width: 480px) {
        #tradeHistory {
            padding: 10px;
        }
        
        #tradeHistory table {
            font-size: 0.8em;
        }
        
        #tradeHistory th, #tradeHistory td {
            padding: 8px 5px;
        }
        
        #tradeHistory .stats-grid {
            grid-template-columns: 1fr;
        }
        
        #tradeHistory .stats-card {
            padding: 15px;
        }
    }
    </style>
    <?php
    return ob_get_clean();
}
add_shortcode('trade_history', 'custom_trade_history_display');

// Enhanced Portfolio Performance Dashboard
function custom_portfolio_dashboard() {
    if (!is_user_logged_in()) return '<p>You must be logged in to view portfolio.</p>';

    $user_id = get_current_user_id();
    $balance = (float) get_field('balance', 'user_' . $user_id);
    $history = get_user_meta($user_id, 'trade_history', true) ?: [];

    ob_start();
    ?>
    <div style="max-width: 1200px; margin: 0 auto; padding: 20px; background: linear-gradient(135deg, #0f0f23 0%, #1a1a3e 100%); border-radius: 15px; color: #fff;">
        <h3 style="color: #64b5f6; margin-bottom: 30px; font-size: 1.8em; text-align: center;">📊 Portfolio Dashboard</h3>

        <!-- Key Performance Metrics -->
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 25px; margin-bottom: 40px;">
            <div style="background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 8px 25px rgba(0,0,0,0.3);">
                <h4 style="margin: 0 0 15px 0; color: #fff; font-size: 1.1em;">Current Balance</h4>
                <p style="font-size: 2em; font-weight: bold; margin: 0; color: #64b5f6;">$<?php echo number_format($balance, 2); ?></p>
            </div>
            <div style="background: linear-gradient(135deg, #4caf50 0%, #45a049 100%); padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 8px 25px rgba(0,0,0,0.3);">
                <h4 style="margin: 0 0 15px 0; color: #fff; font-size: 1.1em;">Total Trades</h4>
                <p style="font-size: 2em; font-weight: bold; margin: 0;" id="dashTotalTrades"><?php echo count($history); ?></p>
            </div>
            <div style="background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%); padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 8px 25px rgba(0,0,0,0.3);">
                <h4 style="margin: 0 0 15px 0; color: #fff; font-size: 1.1em;">Win Rate</h4>
                <p style="font-size: 2em; font-weight: bold; margin: 0;" id="dashWinRate">
                    <?php 
                    $wins = array_filter($history, function($trade) { return $trade['result'] === 'win'; });
                    $winRate = count($history) > 0 ? (count($wins) / count($history)) * 100 : 0;
                    echo number_format($winRate, 1) . '%';
                    ?>
                </p>
            </div>
            <div style="background: linear-gradient(135deg, #9c27b0 0%, #7b1fa2 100%); padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 8px 25px rgba(0,0,0,0.3);">
                <h4 style="margin: 0 0 15px 0; color: #fff; font-size: 1.1em;">Total P/L</h4>
                <p style="font-size: 2em; font-weight: bold; margin: 0;" id="dashTotalPL">
                    <?php 
                    $totalPL = array_sum(array_column($history, 'profit'));
                    $plColor = $totalPL >= 0 ? '#4caf50' : '#f44336';
                    echo '<span style="color: ' . $plColor . ';">' . ($totalPL >= 0 ? '+' : '') . '$' . number_format($totalPL, 2) . '</span>';
                    ?>
                </p>
            </div>
        </div>

        <!-- Asset Performance Breakdown -->
        <div style="background: #1a1a3e; padding: 25px; border-radius: 15px; margin-bottom: 30px; border: 1px solid #2a2a5e;">
            <h4 style="color: #64b5f6; margin-bottom: 20px; font-size: 1.3em;">Asset Performance</h4>
            <div id="assetPerformance" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;"></div>
        </div>

        <!-- Recent Activity -->
        <div style="background: #1a1a3e; padding: 25px; border-radius: 15px; border: 1px solid #2a2a5e;">
            <h4 style="color: #64b5f6; margin-bottom: 20px; font-size: 1.3em;">Recent Activity</h4>
            <div id="recentActivity"></div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const history = <?php echo json_encode($history); ?>;
        
        // Generate asset performance data
        function generateAssetPerformance() {
            const assetData = {};
            
            history.forEach(trade => {
                if (!assetData[trade.asset]) {
                    assetData[trade.asset] = {
                        totalTrades: 0,
                        wins: 0,
                        totalProfit: 0,
                        totalInvested: 0
                    };
                }
                
                assetData[trade.asset].totalTrades++;
                assetData[trade.asset].totalInvested += parseFloat(trade.amount);
                assetData[trade.asset].totalProfit += parseFloat(trade.profit);
                
                if (trade.result === 'win') {
                    assetData[trade.asset].wins++;
                }
            });
            
            const container = document.getElementById('assetPerformance');
            container.innerHTML = '';
            
            if (Object.keys(assetData).length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #888; padding: 20px;">No trading activity yet</p>';
                return;
            }
            
            Object.entries(assetData).forEach(([asset, data]) => {
                const winRate = data.totalTrades > 0 ? ((data.wins / data.totalTrades) * 100).toFixed(1) : 0;
                const profitColor = data.totalProfit >= 0 ? '#4caf50' : '#f44336';
                
                const card = document.createElement('div');
                card.style.cssText = `
                    background: linear-gradient(135deg, #2a2a5e 0%, #1a1a3e 100%);
                    padding: 20px;
                    border-radius: 12px;
                    border-left: 4px solid #64b5f6;
                    box-shadow: 0 6px 20px rgba(0,0,0,0.2);
                `;
                
                card.innerHTML = `
                    <h5 style="margin: 0 0 15px 0; color: #64b5f6; font-size: 1.2em;">${asset}</h5>
                    <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px;">
                        <div style="text-align: center; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;">
                            <div style="font-size: 0.9em; color: #b0b0b0; margin-bottom: 5px;">Total Trades</div>
                            <div style="font-size: 1.3em; font-weight: bold;">${data.totalTrades}</div>
                        </div>
                        <div style="text-align: center; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;">
                            <div style="font-size: 0.9em; color: #b0b0b0; margin-bottom: 5px;">Win Rate</div>
                            <div style="font-size: 1.3em; font-weight: bold;">${winRate}%</div>
                        </div>
                        <div style="text-align: center; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;">
                            <div style="font-size: 0.9em; color: #b0b0b0; margin-bottom: 5px;">Total P/L</div>
                            <div style="font-size: 1.3em; font-weight: bold; color: ${profitColor};">
                                ${data.totalProfit >= 0 ? '+' : ''}$${data.totalProfit.toFixed(2)}
                            </div>
                        </div>
                        <div style="text-align: center; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;">
                            <div style="font-size: 0.9em; color: #b0b0b0; margin-bottom: 5px;">Invested</div>
                            <div style="font-size: 1.3em; font-weight: bold;">$${data.totalInvested.toFixed(2)}</div>
                        </div>
                    </div>
                `;
                
                container.appendChild(card);
            });
        }
        
        // Generate recent activity
        function generateRecentActivity() {
            const container = document.getElementById('recentActivity');
            const recentTrades = history.slice(-10).reverse();
            
            if (recentTrades.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #888; padding: 20px;">No recent activity</p>';
                return;
            }
            
            container.innerHTML = '';
            
            recentTrades.forEach(trade => {
                const date = new Date(trade.timestamp * 1000);
                const timeAgo = getTimeAgo(date);
                const resultColor = trade.result === 'win' ? '#4caf50' : '#f44336';
                const resultIcon = trade.result === 'win' ? '✅' : '❌';
                const directionIcon = trade.direction === 'buy' ? '📈' : '📉';
                const profitColor = trade.profit >= 0 ? '#4caf50' : '#f44336';
                
                const activity = document.createElement('div');
                activity.style.cssText = `
                    background: rgba(255,255,255,0.05);
                    padding: 15px;
                    border-radius: 10px;
                    margin-bottom: 10px;
                    border-left: 4px solid ${resultColor};
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    transition: all 0.3s ease;
                `;
                
                activity.addEventListener('mouseenter', () => {
                    activity.style.background = 'rgba(255,255,255,0.1)';
                });
                
                activity.addEventListener('mouseleave', () => {
                    activity.style.background = 'rgba(255,255,255,0.05)';
                });
                
                activity.innerHTML = `
                    <div>
                        <div style="font-weight: bold; color: #e0e0e0; margin-bottom: 5px;">
                            ${directionIcon} ${trade.direction.toUpperCase()} ${trade.asset}
                        </div>
                        <div style="font-size: 0.9em; color: #b0b0b0;">
                            $${parseFloat(trade.amount).toFixed(2)} • ${timeAgo}
                        </div>
                    </div>
                    <div style="text-align: right;">
                        <div style="font-weight: bold; color: ${resultColor}; margin-bottom: 5px;">
                            ${resultIcon} ${trade.result.toUpperCase()}
                        </div>
                        <div style="font-weight: bold; color: ${profitColor};">
                            ${trade.profit >= 0 ? '+' : ''}$${parseFloat(trade.profit).toFixed(2)}
                        </div>
                    </div>
                `;
                
                container.appendChild(activity);
            });
        }
        
        function getTimeAgo(date) {
            const now = new Date();
            const diff = now - date;
            const minutes = Math.floor(diff / (1000 * 60));
            const hours = Math.floor(diff / (1000 * 60 * 60));
            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
            
            if (minutes < 60) {
                return `${minutes}m ago`;
            } else if (hours < 24) {
                return `${hours}h ago`;
            } else {
                return `${days}d ago`;
            }
        }
        
        // Initialize dashboard
        generateAssetPerformance();
        generateRecentActivity();
    });
    </script>

    <style>
    /* Mobile responsive styles for portfolio dashboard */
    @media (max-width: 768px) {
        .portfolio-dashboard {
            padding: 15px;
        }
        
        .portfolio-dashboard .metrics-grid {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .portfolio-dashboard .asset-performance {
            grid-template-columns: 1fr;
        }
    }

    @media (max-width: 480px) {
        .portfolio-dashboard {
            padding: 10px;
        }
        
        .portfolio-dashboard .metrics-grid {
            grid-template-columns: 1fr;
        }
        
        .portfolio-dashboard .metric-card {
            padding: 20px;
        }
        
        .portfolio-dashboard .activity-item {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .portfolio-dashboard .activity-item > div:last-child {
            margin-top: 10px;
            text-align: left;
        }
    }
    </style>
    <?php
    return ob_get_clean();
}
add_shortcode('portfolio_dashboard', 'custom_portfolio_dashboard');

// Add custom CSS for better mobile experience
function add_trading_simulator_styles() {
    echo '<style>
    /* Global mobile optimizations */
    @media (max-width: 768px) {
        .trading-container {
            margin: 10px;
            padding: 15px;
        }
        
        .trading-grid {
            grid-template-columns: 1fr;
        }
        
        .chart-section {
            order: 2;
        }
        
        .trading-form {
            order: 1;
        }
        
        .balance-display {
            font-size: 1.1em;
            padding: 12px 20px;
        }
        
        .toast {
            font-size: 0.9em;
        }
        
        #toastContainer {
            left: 10px;
            right: 10px;
            max-width: none;
        }
    }
    
    @media (max-width: 480px) {
        .trading-container {
            margin: 5px;
            padding: 10px;
        }
        
        .trading-header {
            padding: 15px;
        }
        
        .trading-header h2 {
            font-size: 1.5em;
        }
        
        .chart-section, .trading-form {
            padding: 15px;
        }
        
        .form-input, .form-select {
            padding: 10px 12px;
        }
        
        .trade-button {
            padding: 12px;
            font-size: 1em;
        }
        
        .trade-info {
            grid-template-columns: 1fr;
        }
    }
    </style>';
}
add_action('wp_head', 'add_trading_simulator_styles');

// Additional utility functions for enhanced functionality
